README

Programming Assignment #3 - Sorting Algorithms
CSCI 362

************************************
Description
************************************
This program runs through 4 different sorting algorithms so the user can analyze and compare the time
complexities of each algorithm. To do this, a vector is generated and loaded with random, non-duplicate 
integer values from 1 to 20,000. For each iteration of the sorting algorithms, the vector size is 
changed so it can be seen how increasing the input vector size affects the execution time of each sorting
algorithm. Once a vector of size n has n number of random values in it, the program runs through the 
sorting algorithms - insertion sort, quick sort, heap sort, and merge sort - and captures the actual 
runtime duration of each. After an unsorted vector has been used, it is sorted and the same size sorted
vector is run through the same algorithms to observe the difference in duration of execution. Once 
duration time has been captured for a particular algorithm, it is added to an output CSV file.  Two CSV
files are generated: sorted.csv and unsorted.csv. These contain the duration times for each sorting algorithm
and input array n values for the sorted and unsorted vectors. The program also outputs a .txt file when n=100.
The file, random.txt, contains 100 unsorted random numbers. The files are generated in the directory the 
program is in. The program needs to be run first to generate any of these output files. No other output is
generated by this program.
 
************************************
Included Files:
************************************
SortAlgos.cpp

************************************
Generated Files:
************************************
sorted.csv
unsorted.csv
random.txt

************************************
Operation
************************************
TO RUN: g++ SortAlgos.cpp -o prog -std=c++11 
	./prog 

i. Program Initiation
	The program must be initialized with the additional specification that it is using C++11 due to the 
	use of the chrono library. This is accomplished by adding -std=c++11 when compiling.

ii. Random Number Generation
	At the beginning of each iteration of the sorting algorithms, a vector is created with a size 
	specified by a global array containing the various input vector sizes required to be run. The n 
	values used are 100, 500, 1000, 2000, 5000, 8000, and 10000.  As the program iterates, an index is 
	used to	increment the n value using the global n values array. The vector is passed to a function that loads
	random values from 1-20000 into the vector and checks for duplicates, so none will occur in the vector. 
	The random number generation is handled by the rand() function. When n=100,  this function also 
	creates and writes 100 random numbers to an ouput file random.txt. The function returns a vector 
	loaded with the required number of values for that iteration of sorting algorithms.

iii. Sorting
	The program proceeds to run through the four specified sorting algorithms: insertion, heap, quick, 
	and merge. First, the unsorted vector is used as an input for each algorithm. The runtimes of the 
	algorithms are captured in microseconds using the chrono library. Auto variables start, stop, and 
	duration are used to calculate the runtime. After each algorithm has finished sorting the input 
	and the runtime duration has been calculated, the duration is output to a CSV file generated by the
	program. When the algorithms are run with an unsorted input, the duration times, along with the n
	values are added to a generated file named unsorted.csv. After all algorithms have been run with an 
	unsorted input, the vector is sorted and the algorithms are run again with the results added to an
	output file named sorted.csv. Using these two output CSV files, algorithm runtimes can be easily observed 
	and analyzed. After the program has gone through each algorithm with an unsorted and sorted vector
	input, the program iterates to the next size vector until all input vector sizes have been used. 

iv. Output
	A total of three files are generated by this program: random.txt which contains 100 random unsorted	
	integer values and is created during the n=100 iteration of the program, unsorted.csv which contains 
	the duration times of the sorting algorithms given an unsorted input vector of size n, and sorted.csv 	
	which contains the duration times of the sorting algorithms given a sorted input vector of size n. No 
	other output is generated by the program

v. Termination
	The program terminates after all of the sorting algorithms have been executed for both an unsorted vector
	input and sorted vector input for each vector size and the algorithm execution times have been recorded.